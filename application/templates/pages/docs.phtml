<div class="container">
	<h2>Documentation</h2>
	<h4>Technologies</h4>
 	<p>The client side of the application uses Twitter Bootstrap CSS Library and jQuery for most of the javascript. The server side is based upon PHP.</p>

	<h4>Design</h4> 
 	<p>The application is based upon a basic Model / View / Controller structure. This allows separation of the data, logic and display.</p>
 	<div class="row text-center">
 		<img alt="Class Diagram" height="347" width="500" src="public/img/umlDiagram.png" class="img">
 	</div> 
	<p>A number of Classes have been created to provide easy access to the Model. The <b>Student</b> and <b>Paper</b> Classes are responsible for providing the 
		application information on each of these. The <b>Filer</b> Class stores the submitted file. The <b>Reporter</b> Class provides the statistical information.</p>
		
	<p><b>Layout</b> is responsible for rendering the view. The layout object is provided all of the data returned from the request. It builds a page from a page template
	   and inserts the relevant content page</p>   

	<p>The Model portion ensures all the data access code is encapsulated in the Student and Paper classes. This will allow for easier modification if the application is upgraded to work from a
 	database. The application only has to read data stored in the text files, and the data is a very simple format. As a result the txt file storage has not complicated the design except for 
 	some additional parsing to get the information out of the files. If there was a need to write data to the file or the database was more complex it would quickly become 
 	very difficult and time consuming to write the individual parsing and storage routines. Maintaining data integrity would be a very difficult task.</p>
	   
 <h4>Implementation</h4> 
  
  <p>The application is organised in a simple file structure that helps separate out everything</p>
  	<dl class="dl-horizontal">
  		<dt>/Application</dt>
  		<dd>Folder with all code</dd>
  		<dt>/Files</dt>
  		<dd>Upload Directory</dd>
  		<dt>/Public</dt>
  		<dd>Directory where all Javascript, CSS files and images are stored.</dd>
  		<dt>index.php</dt>
  		<dd>All requests to the application are made through this file</dd>
	</dl>
 
<p>All page requests are made through the index.php main file. The <b>s</b> parameter passed in the URL as a GET request specifies what screen is requested. When index.php receives
a request it first runs startup.php by including this file. startup.php loads all the required PHP classes, initiates the session, and then recovers and validates
 any POST or GET data sent to the application. This data is then made available to the application.</p>
 
 <p>After startup.php is run the index.php file then includes pageController.php. This determines which page has been requested and ensures all the data required for
 the page is loaded into the $viewData array. The final two lines in the index.php file create a new Layout object loaded with the view data and then implement the display method
 of the object. When the display method of the Layout object is called the object builds the page by buffering a series of included php files. </p> 
 
 <p>The Layout builds the file from a standard layout which has a standard header and footer. It then selects the correct page template file to include from /application/templates/page/.
 The file is the contents of the s variable passed in the GET request with .phtml added. The data contained in the $viewData array is then echoed into each page using PHP statements</p>
 
 The application folder is organised into a series of folders
  	<dl class="dl-horizontal">
  		<dt>Data</dt>
  		<dd>Contains the persistent data in .txt files</dd>
  		<dt>Includes</dt>
  		<dd>Files that are included into the index.php file</dd>
  		<dt>Src</dt>
  		<dd>All the Class definitions</dd>
  		<dt>Templates</dt>
  		<dd>Page Layout Templates</dd>
	</dl>
 
 <p>The custom application Javascript/JQuery code is in /public/js/asa.js</p>
  <p>CSS to customise the appearance of the application after the bootstrap CSS has been applied is located in /public/css/custom.css</p>
 
 <p>This structure allows easily adding pages, while ensuring maintainability. If a change needs to be made to the main layout or header it only needs to be changed in one place. 
 To add a new page just the body needs to be written and saved in the pages directory. Once the relevant elseif line is added to pageController.php the page will be active
  and will have access to the studentID and session.</p>
 
 <p>The application makes any data passed in a GET or POST global variables. This may cause problems if the application was extended further as it could cause variable name collisions.
 At some point this would need to be refactored to ensure the variables are scoped to the relevant pages. </p>
 
 <p>To ensure application security the only directory that can be accessed is the root directory and the /public directory. <b>.htaccess</b> files are used to deny all access to the /files upload
  directory and also the /application directory where the application code resides.</p> 

</div>

